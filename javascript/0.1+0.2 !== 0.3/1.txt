我们在计算机中存储数据是通过二进制进行存储的
js采用的是64位双精度的存储方式

而这六十四位是由三部分组成

符号位 1表示正数 0表示负数 1位

指数位 存储科学计数法的次幂 11位

有效位 就是使用完科学计数法的有效数字 52位

eg: 2333 -> 2.233 * 2^3
2.233是有效数 3是指位树



eg: 我们将小数 0.125转换为二进制的数

0.125*2 = 0.25 取整数部分 0
0.25*2 = 0.5 0
0.5*2 = 1
所以是001


那么我们将0.1 转为二进制树
0.1 * 2 = 0.2 0
0.2 * 2 = 0.4 0
0.4 * 2 = 0.8 0
0.8 * 2 = 1.6 1
0.6 * 2 = 1.2 1
0.2 * 2 = 0.4 0
.。。。。后续就回循环了

--> 0.0001100110 -> 1.10011 * 2^-4

所以 0.2 是 1.10011 * 2^-3

有效位只有52位 所以无法存储无限数 则只能取一个近似值 

所以 0.1+0.2 !== 0.3


解决办法 parseFloat().toFixed(2)
